const specialBgmPaths = {
  closetGame: "/bgm/cart_rider.mp3",
  cardGame: "/bgm/sans.mp3",
};

const defaultBgmPath = "/bgm/animal_forest.mp3";

let currentAudio = null;
let currentBgmPath = null;
let isPlaying = false;

export async function playBgm(state) {
  const path = specialBgmPaths[state] || defaultBgmPath;
  console.log(`üîä playBgm called with state: ${state}, path: ${path}`);

  // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ BGMÍ≥º Í∞ôÍ≥† Ïù¥ÎØ∏ Ïû¨ÏÉù Ï§ëÏù¥Î©¥ Î¨¥Ïãú
  if (path === currentBgmPath && isPlaying) {
    console.log(`üéµ Ïù¥ÎØ∏ ${path} Ïû¨ÏÉù Ï§ë ‚Üí Î¨¥Ïãú`);
    return;
  }

  // Ïù¥Ï†Ñ BGM ÏôÑÏ†ÑÌûà Ï†ïÏßÄÌïú ÌõÑ ÏÉà BGM Ïû¨ÏÉù
  await stopBgm();

  const audio = new Audio(path);
  audio.loop = true;
  audio.volume = 1.0;

  try {
    await audio.play();
    currentAudio = audio;
    currentBgmPath = path;
    isPlaying = true;
    console.log(`‚ñ∂Ô∏è ${path} Ïû¨ÏÉù ÏãúÏûë`);
  } catch (err) {
    console.warn(`üîá BGM Ïû¨ÏÉù Ïã§Ìå® (${state}):`, err);
    isPlaying = false;
  }
}

export function stopBgm() {
  return new Promise(resolve => {
    if (currentAudio) {
      console.log(`‚èπÔ∏è BGM Ï†ïÏßÄ: ${currentBgmPath}`);
      currentAudio.pause();
      currentAudio.currentTime = 0;
      currentAudio = null;
    }
    currentBgmPath = null;
    isPlaying = false;
    resolve();
  });
}
